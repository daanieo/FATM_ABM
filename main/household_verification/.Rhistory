df <- read.csv("results/RStartle.csv")
View(df)
df <- read.csv("results/RStartle.csv")
until<-4320
# theme
theme <- theme(plot.title = element_text(family = "Helvetica", size = (17.5)),
legend.text = element_text(face = "italic", colour="black",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (17.5), colour = "black"),
axis.text=element_text())
# theme
theme <- theme(plot.title = element_text(family = "Helvetica", size = (17.5)),
legend.text = element_text(face = "italic", colour="black",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (17.5), colour = "black"),
axis.text=element_text())
library(ggplot2)
df <- read.csv("results/RStartle.csv")
until<-4320
# theme
theme <- theme(plot.title = element_text(family = "Helvetica", size = (17.5)),
legend.text = element_text(face = "italic", colour="black",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (17.5), colour = "black"),
axis.text=element_text())
# emotional state, variation with alpha
p <- ggplot()+xlim(0,2000) +theme+ ggtitle("Emotional state over time, one household, 'startle'") + labs(x="ticks",y="emotional state",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$EmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
# link gamar to preferred GAMA installation
setup_gama("/home/daan/GAMA")
# define to be researched parametres as c(min,max,stepsize) CHECK IF (max-min)%stepsize == 0 !
params = data.frame("alpha"=c(0.1,0.5,0.1),"beta"=c(0.4,1.0,0.6),"gamma"=c(5.0,30.0,5.0))
# create full list of all the to be researched entries
params_list <- vector(mode="list", length=ncol(params))
# add names to list
names(params_list) <- names(params)
for (p in (1:ncol(params))){ # create list
min <- params[1,p]
max <- params[2,p]
step <- params[3,p]
tmplist <- c()
for (i in 0:((max-min)/step)) {
tmplist <- append(tmplist,min+step*i)
}
print(tmplist)
params_list[[p]] <- tmplist
}
# Create samples for all variables  !! not automatic
params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$gamma)
names(params_sample) <- names(params)
df <- read.csv("results/RStartle.csv")
until<-4320
# theme
theme <- theme(plot.title = element_text(family = "Helvetica", size = (17.5)),
legend.text = element_text(face = "italic", colour="black",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (17.5), colour = "black"),
axis.text=element_text())
# emotional state, variation with alpha
p <- ggplot()+xlim(0,2000) +theme+ ggtitle("Emotional state over time, one household, 'startle'") + labs(x="ticks",y="emotional state",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$EmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
total_df <- read.csv("results/RStartle.csv")
until<-4320
# theme
theme <- theme(plot.title = element_text(family = "Helvetica", size = (17.5)),
legend.text = element_text(face = "italic", colour="black",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (17.5), colour = "black"),
axis.text=element_text())
# emotional state, variation with alpha
p <- ggplot()+xlim(0,2000) +theme+ ggtitle("Emotional state over time, one household, 'startle'") + labs(x="ticks",y="emotional state",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$EmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, variation with alpha
p <- ggplot() +theme+ ggtitle("Food in storage over time, one household, 'startle'") + labs(x="ticks",y="Food in storage",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, variation with alpha
p <- ggplot() +theme+ ggtitle("Food in storage over time, one household, 'startle'") + labs(x="ticks",y="Food in storage",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, variation with gamma
p <- ggplot() + geom_hline(yintercept=5*5,color="red") + theme+ ggtitle("Food in storage over time, one household, 'startle'") + labs(x="ticks",y="Food in storage",colour="gamma",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, variation with gamma
p <- ggplot()  + theme+ ggtitle("Food in storage over time, one household, 'startle'") + labs(x="ticks",y="Food in storage",colour="gamma",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, focus on gamma=5
p <- ggplot() +  geom_hline(yintercept=15/30*5*5*2,color="red")+geom_hline(yintercept=15/30*5*5,color="red") + theme+ ggtitle("Food in storage over time, one household, gamma=5, 'startle'") + labs(x="ticks",y="Food in storage",colour="alpha",size=(200))
for (s in 0:10) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
total_df <- read.csv("results/RNoStartle.csv")
p <- ggplot()+xlim(0,2000) +theme+ ggtitle("Emotional state over time, one household, 'startle'") + labs(x="ticks",y="emotional state",colour="alpha",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$EmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$alpha[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
# food in storage, variation with gamma
p <- ggplot()  + theme+ ggtitle("Food in storage over time, one household, 'startle'") + labs(x="ticks",y="Food in storage",colour="gamma",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
p <- ggplot()  + theme+ ggtitle("Food in storage over time, one household, 'No startle'") + labs(x="ticks",y="Food in storage",colour="gamma",size=(200))
for (s in 0:(nrow(params_sample)-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(total_df$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(total_df$FoodInStorage[(s*until+1):((s+1)*until+1)]),color=as.numeric(total_df$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
