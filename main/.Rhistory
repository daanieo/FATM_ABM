xml$addTag("Parameters",close=FALSE) # Parameters layer
# Add all paramaters and values
for (i in 1:ncol(single_params)) {
xml$addTag("Parameter",attrs=c(name=colnames(single_params)[i],type="FLOAT",value=single_params[1,i]))
}
xml$closeTag()
xml$addTag("Outcomes",close=FALSE) # Outcome layer
# Add all outcomes
for (i in 1:ncol(obs)) {
xml$addTag("Output",attrs=c(id = paste0(i), name=colnames(obs)[i],framerate=obs[1,i]))
}
xml$closeTag()
xml$closeTag()
xml$closeTag()
saveXML(xml,file=tmp_xml)
return(tmp_xml)
}
# define to be researched parametres as c(min,max,stepsize) CHECK IF (max-min)%stepsize == 0 !
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
# params = data.frame("ParallelServed"=c(1,10,1), "gamma"=c(0,30.0,10)) # Facility testing
# params = data.frame("alpha"=c(0.0,1.0,1.0),"beta"=c(0,1.0,1.0),"avg_pc"=c(0,1.0,1.0)) # network testing for extreme values
# params = data.frame("alpha"=c(0.1,0.5,0.4),"beta"=c(0,1.0,0.5)) # network testing sampling
#params = data.frame("alpha"=c(0.1,0.1,1.0),"gamma"=c(0.0,30.0,10.0)) # individual household testing
# create full list of all the to be researched entries
params_list <- vector(mode="list", length=ncol(params))
# add names to list
names(params_list) <- names(params)
for (p in (1:ncol(params))){ # create list
min <- params[1,p]
max <- params[2,p]
step <- params[3,p]
tmplist <- c()
for (i in 0:((max-min)/step)) {
tmplist <- append(tmplist,min+step*i)
}
params_list[[p]] <- tmplist
}
# Create samples for all variables  !! not automatic
params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma,params_list$epsilon) # Queue testing
# params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma)
# params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$avg_pc) # network testing extreme values
# params_sample <- expand.grid(params_list$alpha,params_list$beta) # network testing sampling
# params_sample <- expand.grid(params_list$alpha,params_list$gamma) # individual household testing
names(params_sample) <- names(params)
# create dataframe for observations and corresponding framerate
# obs = data.frame("tick"=1,"AverageEmotionalState"=1,"EmotionalState"=1) # Network testing
# obs = data.frame("tick"=1,"EmotionalState"=1,"FoodInStorage"=1) # Individual household testing
# obs = data.frame("tick"=1,"AverageDeliverySize"=1,"QueueLength"=1,"FacilityStorage"=1)
obs = data.frame("tick"=1,"AverageDeliverySize"=1,"QueueLength"=1,"FacilityStorage"=1,"AverageEmotionalState"=1)
# set path to model file
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
#path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/facilities_test.gaml"
# path = "/home/daan/GAMA/workspace/FATM_ABM/main/household_verification/household_test.gaml"
# path = "/home/daan/GAMA/workspace/FATM_ABM/main/household_verification/network_test.gaml"
# give experiment name
# exp_name = "NoStartle"
# exp_name = "NetworkStartle"
exp_name = "FacilityToHouseholds"
# till what tick
cycles_in_day <- 6*24
days_runtime<-30
until = paste0(cycles_in_day*days_runtime)
replications <- 1
tb <- Sys.time()
# empty df
total_df <- NULL
# for the entire sample list
for (run in 1:nrow(params_sample)){
for (replication in 1:replications){
simulation_id<-paste0(replication)
# temporary experiment xml
tmp_xml <- createXML(single_params = params_sample[run,],obs=obs,simulation_id = simulation_id,model_path = path,exp_name =   exp_name,until=until)
tmp_dir <- tempdir() # temporary dir to store outcome xml
message("call gama model")
call_gama(tmp_xml,hpc=2,output_dir = tmp_dir) # run gama model
message("import outcome xml")
# import outcome xml
tmp_df<-XML::xmlToDataFrame(XML::xmlParse(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml")), stringsAsFactors = FALSE)
# add column names
names(tmp_df)<-colnames(obs)
# delete temporary xml files
unlink(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml"))
unlink(tmp_xml)
# add input parameters to df
for (p in 1:ncol(params_sample)){
tmpcol <- rep(params_sample[run,p],until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- names(params_sample)[p]
}
tmpcol <- rep(simulation_id,until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- "Replication"
# add to existing dataframe
if (is.null(total_df)){
total_df<-tmp_df
} else{
total_df <- rbind(total_df, tmp_df)
}
}
}
# Write results to csv
write.csv(total_df,paste0("/home/daan/Desktop/",exp_name,".csv"))
ta <- Sys.time()
message("took me ",ta-tb)
df_tmp <- filter(total_df,ParallelServed==5)
df_tmp <- filter(df_tmp,gamma==1|gamma==5|gamma==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=[1,5,10], PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
View(total_df)
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/facilities_test.gaml"
params = data.frame("ParallelServed"=c(1,10,1),"gamma"=c(1.0,30.0,1.0))
total_df <- read.csv("/home/daan/Desktop/Verification_results/HouseholdsToFacility.csv")
runtime <- 30*24*6 # days times hours times tick per hour
samplesize <- nrow(total_df)/runtime
df_tmp <- filter(total_df,ParallelServed==5)
df_tmp <- filter(df_tmp,gamma==1|gamma==5|gamma==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=[1,5,10], PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,ParallelServed==5)
df_tmp <- filter(df_tmp,gamma==1|gamma==5|gamma==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=[1,5,10], PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$gamma[(s*until+1):((s+1)*until+1)]))); #
}
print(p);
print(p,silent=TRUE)
df_tmp <- filter(total_df,ParallelServed==5)
df_tmp <- filter(df_tmp,gamma==1|gamma==5|gamma==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=[1,5,10], PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$gamma[(s*until+1):((s+1)*until+1)])),silent=TRUE); #
}
print(p,silent=TRUE)
df_tmp <- filter(total_df,ParallelServed==5)
df_tmp <- filter(df_tmp,gamma==1|gamma==5|gamma==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=[1,5,10], PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="gamma",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$gamma[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
replications<-1
total_df <- read.csv("/home/daan/Desktop/Verification_results/FacilityToHouseholds.csv")
runtime <- 30*24*6 # days times hours times tick per hour
samplesize <- nrow(total_df)/runtime
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+xlim(0,500)+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,epsilon==0.5)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
replications<-1
total_df <- read.csv("/home/daan/Desktop/Verification_results/FacilityToHouseholds.csv")
runtime <- 30*24*6 # days times hours times tick per hour
samplesize <- nrow(total_df)/runtime
df_tmp <- filter(total_df,epsilon==0.5)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
View(total_df)
# define to be researched parametres as c(min,max,stepsize) CHECK IF (max-min)%stepsize == 0 !
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
# params = data.frame("ParallelServed"=c(1,10,1), "gamma"=c(0,30.0,10)) # Facility testing
# params = data.frame("alpha"=c(0.0,1.0,1.0),"beta"=c(0,1.0,1.0),"avg_pc"=c(0,1.0,1.0)) # network testing for extreme values
# params = data.frame("alpha"=c(0.1,0.5,0.4),"beta"=c(0,1.0,0.5)) # network testing sampling
#params = data.frame("alpha"=c(0.1,0.1,1.0),"gamma"=c(0.0,30.0,10.0)) # individual household testing
# create full list of all the to be researched entries
params_list <- vector(mode="list", length=ncol(params))
# add names to list
names(params_list) <- names(params)
for (p in (1:ncol(params))){ # create list
min <- params[1,p]
max <- params[2,p]
step <- params[3,p]
tmplist <- c()
for (i in 0:((max-min)/step)) {
tmplist <- append(tmplist,min+step*i)
}
params_list[[p]] <- tmplist
}
# Create samples for all variables  !! not automatic
params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma,params_list$epsilon) # Queue testing
# params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma)
# params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$avg_pc) # network testing extreme values
# params_sample <- expand.grid(params_list$alpha,params_list$beta) # network testing sampling
# params_sample <- expand.grid(params_list$alpha,params_list$gamma) # individual household testing
names(params_sample) <- names(params)
View(params_sample)
# define to be researched parametres as c(min,max,stepsize) CHECK IF (max-min)%stepsize == 0 !
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "gamma"=c(1,11,5),"epsilon"=c(0,1.0,0.5))  # Queue testing
# params = data.frame("ParallelServed"=c(1,10,1), "gamma"=c(0,30.0,10)) # Facility testing
# params = data.frame("alpha"=c(0.0,1.0,1.0),"beta"=c(0,1.0,1.0),"avg_pc"=c(0,1.0,1.0)) # network testing for extreme values
# params = data.frame("alpha"=c(0.1,0.5,0.4),"beta"=c(0,1.0,0.5)) # network testing sampling
#params = data.frame("alpha"=c(0.1,0.1,1.0),"gamma"=c(0.0,30.0,10.0)) # individual household testing
# create full list of all the to be researched entries
params_list <- vector(mode="list", length=ncol(params))
# add names to list
names(params_list) <- names(params)
for (p in (1:ncol(params))){ # create list
min <- params[1,p]
max <- params[2,p]
step <- params[3,p]
tmplist <- c()
for (i in 0:((max-min)/step)) {
tmplist <- append(tmplist,min+step*i)
}
params_list[[p]] <- tmplist
}
# Create samples for all variables  !! not automatic
params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma,params_list$epsilon) # Queue testing
# params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma)
# params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$avg_pc) # network testing extreme values
# params_sample <- expand.grid(params_list$alpha,params_list$beta) # network testing sampling
# params_sample <- expand.grid(params_list$alpha,params_list$gamma) # individual household testing
names(params_sample) <- names(params)
View(params_list)
View(params_sample)
# define to be researched parametres as c(min,max,stepsize) CHECK IF (max-min)%stepsize == 0 !
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "gamma"=c(1,11,5),"epsilon"=c(0,1.0,0.5))  # Queue testing
# params = data.frame("ParallelServed"=c(1,10,1), "gamma"=c(0,30.0,10)) # Facility testing
# params = data.frame("alpha"=c(0.0,1.0,1.0),"beta"=c(0,1.0,1.0),"avg_pc"=c(0,1.0,1.0)) # network testing for extreme values
# params = data.frame("alpha"=c(0.1,0.5,0.4),"beta"=c(0,1.0,0.5)) # network testing sampling
#params = data.frame("alpha"=c(0.1,0.1,1.0),"gamma"=c(0.0,30.0,10.0)) # individual household testing
# create full list of all the to be researched entries
params_list <- vector(mode="list", length=ncol(params))
# add names to list
names(params_list) <- names(params)
for (p in (1:ncol(params))){ # create list
min <- params[1,p]
max <- params[2,p]
step <- params[3,p]
tmplist <- c()
for (i in 0:((max-min)/step)) {
tmplist <- append(tmplist,min+step*i)
}
params_list[[p]] <- tmplist
}
# Create samples for all variables  !! not automatic
params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$ParallelServed,params_list$gamma,params_list$epsilon) # Queue testing
# params_sample <- expand.grid(params_list$ParallelServed,params_list$alpha,params_list$beta,params_list$gamma)
# params_sample <- expand.grid(params_list$alpha,params_list$beta,params_list$avg_pc) # network testing extreme values
# params_sample <- expand.grid(params_list$alpha,params_list$beta) # network testing sampling
# params_sample <- expand.grid(params_list$alpha,params_list$gamma) # individual household testing
names(params_sample) <- names(params)
View(params_sample)
# set path to model file
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
#path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/facilities_test.gaml"
# path = "/home/daan/GAMA/workspace/FATM_ABM/main/household_verification/household_test.gaml"
# path = "/home/daan/GAMA/workspace/FATM_ABM/main/household_verification/network_test.gaml"
# give experiment name
# exp_name = "NoStartle"
# exp_name = "NetworkStartle"
exp_name = "FacilityToHouseholds"
# till what tick
cycles_in_day <- 6*24
days_runtime<-30
until = paste0(cycles_in_day*days_runtime)
replications <- 1
tb <- Sys.time()
# empty df
total_df <- NULL
# for the entire sample list
for (run in 1:nrow(params_sample)){
for (replication in 1:replications){
simulation_id<-paste0(replication)
# temporary experiment xml
tmp_xml <- createXML(single_params = params_sample[run,],obs=obs,simulation_id = simulation_id,model_path = path,exp_name =   exp_name,until=until)
tmp_dir <- tempdir() # temporary dir to store outcome xml
message("call gama model")
call_gama(tmp_xml,hpc=2,output_dir = tmp_dir) # run gama model
message("import outcome xml")
# import outcome xml
tmp_df<-XML::xmlToDataFrame(XML::xmlParse(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml")), stringsAsFactors = FALSE)
# add column names
names(tmp_df)<-colnames(obs)
# delete temporary xml files
unlink(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml"))
unlink(tmp_xml)
# add input parameters to df
for (p in 1:ncol(params_sample)){
tmpcol <- rep(params_sample[run,p],until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- names(params_sample)[p]
}
tmpcol <- rep(simulation_id,until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- "Replication"
# add to existing dataframe
if (is.null(total_df)){
total_df<-tmp_df
} else{
total_df <- rbind(total_df, tmp_df)
}
}
}
# Write results to csv
write.csv(total_df,paste0("/home/daan/Desktop/",exp_name,".csv"))
ta <- Sys.time()
message("took me ",ta-tb)
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
replications<-1
total_df <- read.csv("/home/daan/Desktop/Verification_results/FacilityToHouseholds.csv")
runtime <- 30*24*6 # days times hours times tick per hour
samplesize <- nrow(total_df)/runtime
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- total_df #filter(total_df,gamma==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
View(tmp_df)
View(total_df)
df_tmp <- filter(total_df,beta==0)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==1)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$beta[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
tb <- Sys.time()
# empty df
total_df <- NULL
# for the entire sample list
for (run in 1:nrow(params_sample)){
for (replication in 1:replications){
simulation_id<-paste0(replication)
# temporary experiment xml
tmp_xml <- createXML(single_params = params_sample[run,],obs=obs,simulation_id = simulation_id,model_path = path,exp_name =   exp_name,until=until)
tmp_dir <- tempdir() # temporary dir to store outcome xml
message("call gama model")
call_gama(tmp_xml,hpc=2,output_dir = tmp_dir) # run gama model
message("import outcome xml")
# import outcome xml
tmp_df<-XML::xmlToDataFrame(XML::xmlParse(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml")), stringsAsFactors = FALSE)
# add column names
names(tmp_df)<-colnames(obs)
# delete temporary xml files
unlink(paste0(tmp_dir,"/","simulation-outputs",simulation_id,".xml"))
unlink(tmp_xml)
# add input parameters to df
for (p in 1:ncol(params_sample)){
tmpcol <- rep(params_sample[run,p],until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- names(params_sample)[p]
}
tmpcol <- rep(simulation_id,until)
tmp_df <- cbind(tmpcol,tmp_df)
names(tmp_df)[1] <- "Replication"
# add to existing dataframe
if (is.null(total_df)){
total_df<-tmp_df
} else{
total_df <- rbind(total_df, tmp_df)
}
}
}
# Write results to csv
write.csv(total_df,paste0("/home/daan/Desktop/",exp_name,".csv"))
ta <- Sys.time()
message("took me ",ta-tb)
path = "/home/daan/GAMA/workspace/FATM_ABM/main/facility_verification/QReaction_test.gaml"
params = data.frame("alpha"=c(0.1,0.1,0.4),"beta"=c(0,1.0,1.0), "ParallelServed"=c(1,5,4), "epsilon"=c(0,1.0,0.5), "gamma"=c(1,11,5))  # Queue testing
replications<-1
total_df <- read.csv("/home/daan/Desktop/Verification_results/FacilityToHouseholds.csv")
runtime <- 30*24*6 # days times hours times tick per hour
samplesize <- nrow(total_df)/runtime
df_tmp <- filter(total_df)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))#+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)])))#,color=as.numeric(df_tmp$ParallelServed[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df)
# df_tmp <- filter(df_tmp,ParallelServed==1|ParallelServed==5|ParallelServed==10)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$beta[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
View(total_df)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="PllServed",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$beta[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=1, PllServed = [1,5,10]") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="epsilon",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$epsilon[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Avg emotional state, gamma=11, PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="epsilon",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$epsilon[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=11, PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="epsilon",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$epsilon[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Length of queue, gamma=11, PllServed = 5") + labs(x="ticks [10 min]",y="Length of queue [# people]",colour="epsilon",size=(200))+scale_colour_gradient(low="lightblue",high="blue4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$QueueLength[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$epsilon[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
df_tmp <- filter(total_df,beta==0)
df_tmp <- filter(df_tmp,ParallelServed==5,gamma==11)
p <- ggplot()+theme+ ggtitle("Avg emotional state, gamma=11, PllServed = 5") + labs(x="ticks [10 min]",y="Avg ES [-]",colour="epsilon",size=(200))+scale_colour_gradient(low="lightgreen",high="green4")
for (s in 0:(samplesize-1)) {
until<-as.numeric(until)
p<-p+geom_line(aes_string(x=as.numeric(df_tmp$tick[(s*until+1):((s+1)*until+1)]),y=as.numeric(df_tmp$AverageEmotionalState[(s*until+1):((s+1)*until+1)]),color=as.numeric(df_tmp$epsilon[(s*until+1):((s+1)*until+1)]))) #
}
print(p)
